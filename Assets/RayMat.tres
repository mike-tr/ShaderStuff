[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://djdtot5bjjutu"]

[sub_resource type="Shader" id="Shader_sny0r"]
code = "shader_type spatial;
//render_mode unshaded;

const vec3 centerA = vec3(0.0);
const vec3 centerB = vec3(0.4,0,0);
const float radiusA = 1.0;
const float radiusB = 1.5;
float map(vec3 p, vec3 pos){
	float p1 = length(p - (centerA + pos)) - radiusA;
	float p2 = length(p - (centerB + pos)) - radiusB;
	return p1;
}

varying vec3 vert;
void vertex() {
	// Called for every vertex the material is visible on.
	//VERTEX -= vec3(1);
	//translatedVertex = (INV_VIEW_MATRIX * vec4(VERTEX,1)).xyz;
	//VERTEX = translatedVertex;

	//vert = (INV_VIEW_MATRIX * vec4(VERTEX,1)).xyz;
}

const float minDistance = 0.001;
const float maxDistance = 100.0;

void fragment() {
	// Calculate the uv's since we are using a box, the following line is the way
	// We also make sure that the center (0,0) is has the value (0,0).
	// note that uvs are from (0 to 1) by default so we subtract 0.5
	vec3 world_position = MODEL_MATRIX[3].xyz;
	vec2 uv = fract(UV * vec2(3,2)) - .5;
	vec3 ray_origin = CAMERA_POSITION_WORLD;

	//vec3 ray_dir = normalize(vec3(uv, 1) - CAMERA_POSITION_WORLD);
	vec3 ray_dir = normalize((INV_VIEW_MATRIX * vec4(VERTEX,1)).xyz - ray_origin);
	//vec3 ray_dir = normalize(translatedVertex - ray_origin);
	vec3 color = vec3(0);


	float ndist = map(ray_origin, world_position);
	float depth = ndist;
	vec3 current_pos = ray_origin + ray_dir * ndist;

	for(int i=0; i < 80; i++){
		if(ndist < minDistance || depth > maxDistance){
			break;
		}
		ndist = map(current_pos, world_position);
		current_pos = current_pos + ray_dir * ndist;
		depth += ndist;
		color = vec3(float(i)) / 80.0;
	}

	//color = vec3(depth / maxDistance);
	color = vec3(1);
	//color.rb = uv;
	if(depth > maxDistance){
		color = vec3(0);
		//ALPHA = 0.0;
	}
	ALBEDO = color;
}

//void light() {
//	// Called for every pixel for every light affecting the material.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[resource]
render_priority = 0
shader = SubResource("Shader_sny0r")
